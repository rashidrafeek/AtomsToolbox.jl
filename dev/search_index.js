var documenterSearchIndex = {"docs":
[{"location":"#AtomsToolbox","page":"AtomsToolbox","title":"AtomsToolbox","text":"","category":"section"},{"location":"#Getter-functions","page":"AtomsToolbox","title":"Getter functions","text":"","category":"section"},{"location":"","page":"AtomsToolbox","title":"AtomsToolbox","text":"distance\nangle(::AbstractSystem, ::Int, ::Int, ::Int)\ndihedral\ndistance_matrix\nscaled_position\ncell_parameters\ncell_lengths\ncell_angles\nvolume\nAtomsToolbox.connectivity_matrix\nAtomsToolbox.connected_components\nAtomsToolbox.pbc_shortest_vectors","category":"page"},{"location":"#AtomsToolbox.distance","page":"AtomsToolbox","title":"AtomsToolbox.distance","text":"distance(system::AbstractSystem, at1, at2)\n\nGet the distance between atoms with indices at1 and at2.\n\n\n\n\n\n","category":"function"},{"location":"#Base.angle-Tuple{AbstractSystem, Int64, Int64, Int64}","page":"AtomsToolbox","title":"Base.angle","text":"angle(system::AbstractSystem, at1, at2, at3)\n\nGet the angle between vectors connecting atoms with indices at2-at1 and  at2-at3.\n\n\n\n\n\n","category":"method"},{"location":"#AtomsToolbox.dihedral","page":"AtomsToolbox","title":"AtomsToolbox.dihedral","text":"dihedral(system::AbstractSystem, at1, at2, at3, at4)\n\nGet the dihedral angle for the atoms specified by indices at1, at2, at3 and at4.\n\n\n\n\n\n","category":"function"},{"location":"#AtomsToolbox.distance_matrix","page":"AtomsToolbox","title":"AtomsToolbox.distance_matrix","text":"distance_matrix(system::AbstractSystem)\n\nGet the distance matrix between all atoms as an NxN matrix where N is the number of atoms in the given system.\n\n\n\n\n\n","category":"function"},{"location":"#AtomsToolbox.scaled_position","page":"AtomsToolbox","title":"AtomsToolbox.scaled_position","text":"scaled_position(sys::AbstractSystem)\nscaled_position(atom::Atom, cellmat)\n\nObtain the scaled positions (fractional coordinates) with respect to the cell matrix for the given system or atom.\n\n\n\n\n\n","category":"function"},{"location":"#AtomsToolbox.cell_parameters","page":"AtomsToolbox","title":"AtomsToolbox.cell_parameters","text":"cell_parameters(sys::AbstractSystem)\n\nObtain the cell lengths and angles as a Vector, [a,b,c,α,β,γ].\n\n\n\n\n\n","category":"function"},{"location":"#AtomsToolbox.cell_lengths","page":"AtomsToolbox","title":"AtomsToolbox.cell_lengths","text":"cell_lengths(sys::AbstractSystem)\n\nObtain the cell lengths as a Vector, [a,b,c].\n\n\n\n\n\n","category":"function"},{"location":"#AtomsToolbox.cell_angles","page":"AtomsToolbox","title":"AtomsToolbox.cell_angles","text":"cell_angles(sys::AbstractSystem)\n\nObtain the cell angles as a Vector, [α,β,γ].\n\n\n\n\n\n","category":"function"},{"location":"#AtomsToolbox.volume","page":"AtomsToolbox","title":"AtomsToolbox.volume","text":"volume(sys::AbstractSystem)\n\nObtain the volume of the given system.\n\n\n\n\n\n","category":"function"},{"location":"#AtomsToolbox.connectivity_matrix","page":"AtomsToolbox","title":"AtomsToolbox.connectivity_matrix","text":"connectivity_matrix(\n    system;                                                                 \n    nlcutoff = natural_cutoffs(system).+0.2,\n    retdistmat = false\n)\n\nGet the connectivity matrix of the given system. The cutoff is specified using nlcutoff. To return the distance matrix, set retdistmat as true.\n\n\n\n\n\n","category":"function"},{"location":"#AtomsToolbox.connected_components","page":"AtomsToolbox","title":"AtomsToolbox.connected_components","text":"connected_components(\n    system, dists=true;\n    nlcutoff = natural_cutoffs(str).+0.2,\n    retconnmat = false\n)\n\nGet connected components of the given system based on a given cutoff for each of the elements present, nlcutoff which by default is the covalent radii.  dists and retconnmat specifies whether to return the distance matrix and  connectivity matrix respectively.\n\n\n\n\n\n","category":"function"},{"location":"#AtomsToolbox.pbc_shortest_vectors","page":"AtomsToolbox","title":"AtomsToolbox.pbc_shortest_vectors","text":"pbc_shortest_vectors(\n    system::AbstractSystem, pos1::T, pos2::T, \n    return_dists::Val{RD}=Val(false), return_vects::Val{RV}=Val(true)\n) where {T <: AbstractVector{<: Unitful.Length}, RD, RV}\n\nObtain the shortest vectors between position vectors, pos1 and pos2, taking into account PBC of the given system.\n\n\n\n\n\n","category":"function"},{"location":"#Functions-to-build/tranform-systems","page":"AtomsToolbox","title":"Functions to build/tranform systems","text":"","category":"section"},{"location":"","page":"AtomsToolbox","title":"AtomsToolbox","text":"sort(::AbstractSystem)\nsupercell\nwrap","category":"page"},{"location":"#Base.sort-Tuple{AbstractSystem}","page":"AtomsToolbox","title":"Base.sort","text":"sort(system::AbstractSystem; by=x->atomic_number(x), rev=false)\n\nSort an the atoms in an AbstractSystem. The by keyword argument specifies the sorting function and takes as input the atom object. By default, the system is sorted based on its atomic numbers. rev can be used to reverse the order.\n\n\n\n\n\n","category":"method"},{"location":"#AtomsToolbox.supercell","page":"AtomsToolbox","title":"AtomsToolbox.supercell","text":"supercell(system::AbstractSystem, supercellvec::Vector{Int}; sorted=false)\n\nCreate a supercell of the given system, where supercellvec is the repetitions in each direction. All system and atom properties are copied to the new system. If sorted is true, resultant supercell is sorted based on atomic_symbol of input structure.\n\n\n\n\n\n","category":"function"},{"location":"#AtomsToolbox.wrap","page":"AtomsToolbox","title":"AtomsToolbox.wrap","text":"wrap(system::AbstractSystem)\n\nWrap all the atoms in the given system into the cell and return the wrapped system. \n\nwarning: Warning\nCurrently only works for orthogonal boxes.\n\n\n\n\n\n","category":"function"},{"location":"#Index","page":"AtomsToolbox","title":"Index","text":"","category":"section"},{"location":"","page":"AtomsToolbox","title":"AtomsToolbox","text":"","category":"page"}]
}
